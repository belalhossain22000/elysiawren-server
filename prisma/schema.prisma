generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  firstName    String
  lastName     String
  userName     String?
  email        String     @unique
  profileImage String?
  password     String
  role         UserRole   @default(USER)
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reviews      Review[]
  Cart         Cart[]
  Order        Order[]
  Payment      Payment[]
  Wishlist     Wishlist[]

  @@map("Users")
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("Brands")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("Categories")
}

model Product {
  id               String  @id @default(uuid())
  brandId          String
  categoryId       String
  name             String
  price            Float
  discount         Float
  puffs            Int
  nicotineStrength Float
  battery          Int
  eLiquidCapacity  Float
  flavorsAvailable String
  drawActivation   Boolean
  deviceType       String
  safetyWarnings   String
  imageUrl         String
  isStock          Boolean
  quantity         Int
  description      String
  brand        Brand          @relation(fields: [brandId], references: [id])
  category     Category       @relation(fields: [categoryId], references: [id])
  Review       Review[]
  CartItem     CartItem[]
  OrderItem    OrderItem[]
  WishlistItem WishlistItem[]

}

model Image {
  id        String  @id @default(uuid())
  url       String
  altText   String?
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
  Order Order[]
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  price     Float

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  cartId          String
  totalAmount     Float
  status          OrderStatus 
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippingAddress String
  zipCode         String
  city            String
  state           String
  country         String

  user       User        @relation(fields: [userId], references: [id])
  cart       Cart        @relation(fields: [cartId], references: [id])
  orderItems OrderItem[]
  Payment    Payment[]
}


enum OrderStatus {
  PENDING
  ACCEPTED
  SHIPPED
  COMPLETED
  DELIVERED
  REJECTED
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  paymentMethod String // e.g., 'Credit Card', 'PayPal', 'Stripe'
  paymentStatus paymentStatus // e.g., 'Pending', 'Completed', 'Failed'
  amount        Float
  paymentDate   DateTime      @default(now())
  transactionId String? // e.g., payment gateway transaction ID
  userId        String

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Review {
  id        String  @id @default(uuid())
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  rating    Int
  content   String

  user User @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id])
  items WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  addedAt    DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}


enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

enum paymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REJECTED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}
